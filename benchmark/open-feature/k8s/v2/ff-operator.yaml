apiVersion: core.openfeature.dev/v1beta1
kind: FeatureFlag
metadata:
  name: app-flags-operator
  namespace: default
spec:
  flagSpec:
    flags:
      nova-funcao:
        state: "ENABLED"
        variants:
          "on": true
          "off": false
        defaultVariant: "on"
      welcome-message:
        state: "ENABLED"
        variants:
          "v1": "Bem-vindo ao nosso serviço (modo operator)!"
          "v2": "Olá! Parece que estamos enfrentando alguns problemas (modo operator). Nossa equipe está trabalhando nisso!"
        defaultVariant: "v2"
---
apiVersion: core.openfeature.dev/v1beta1
kind: FeatureFlagSource
metadata:
  name: feature-flag-source-operator
spec:
  sources:
    - source: default/app-flags-operator
      provider: kubernetes
    # - source: http://flipt:8080/api/v1/evaluate
    #   provider: http
  port: 8013
  managementPort: 8014
  evaluator: json
  logFormat: json
  envVarPrefix: FLAGD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world-app-operator
spec:
  selector:
    matchLabels:
      app: hello-world-operator
  template:
    metadata:
      labels:
        app: hello-world-operator
      annotations:
        openfeature.dev/enabled: "true"
        openfeature.dev/featureflagsource: "default/feature-flag-source-operator"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8014"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: hello-world
          image: hello-world-app:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
          env:
            - name: FLAGD_MODE
              value: "operator"
            - name: FLAGD_HOST
              value: "localhost"
            - name: FLAGD_PORT
              value: "8013"
            - name: FLAGD_MANAGEMENT_PORT
              value: "8014"
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service-operator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8014"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: hello-world-operator
  ports:
    - port: 80
      name: http
      targetPort: 3000
    - port: 8014
      name: metrics
      targetPort: 8014
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flipt
spec:
  selector:
    matchLabels:
      app: flipt
  template:
    metadata:
      labels:
        app: flipt
    spec:
      containers:
        - name: flipt
          image: flipt/flipt:latest
          ports:
            - containerPort: 8080
            - containerPort: 9000 # gRPC
---
apiVersion: v1
kind: Service
metadata:
  name: flipt
spec:
  selector:
    app: flipt
  ports:
    - port: 8080
      name: http
    - port: 9000
      name: grpc
# observability
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'flagd-metrics'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: hello-world-operator
            action: keep
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            regex: "8014"
            action: keep
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      name: http
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: default
