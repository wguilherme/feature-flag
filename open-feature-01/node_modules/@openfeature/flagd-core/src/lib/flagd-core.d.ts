import type { ResolutionDetails, Logger, EvaluationContext, EvaluationDetails, FlagValue, FlagValueType, JsonValue, FlagMetadata } from '@openfeature/core';
import { FeatureFlag } from './feature-flag';
import { Storage } from './storage';
type ResolutionDetailsWithFlagMetadata<T> = Required<Pick<ResolutionDetails<T>, 'flagMetadata'>> & ResolutionDetails<T>;
/**
 * Expose flag configuration setter and flag resolving methods.
 */
export declare class FlagdCore implements Storage {
    private _logger;
    private _storage;
    constructor(storage?: Storage, logger?: Logger);
    setConfigurations(flagConfig: string): string[];
    getFlag(key: string): FeatureFlag | undefined;
    getFlags(): Map<string, FeatureFlag>;
    getFlagSetMetadata(): FlagMetadata;
    /**
     * Resolve the flag evaluation to a boolean value.
     * @param flagKey - The key of the flag to be evaluated.
     * @param defaultValue - The default value to be returned if the flag is not found.
     * @param evalCtx - The evaluation context to be used for targeting.
     * @param logger - The logger to be used to troubleshoot targeting errors. Overrides the default logger.
     * @returns - The resolved value and the reason for the resolution.
     */
    resolveBooleanEvaluation(flagKey: string, defaultValue: boolean, evalCtx?: EvaluationContext, logger?: Logger): ResolutionDetailsWithFlagMetadata<boolean>;
    /**
     * Resolve the flag evaluation to a string value.
     * @param flagKey - The key of the flag to be evaluated.
     * @param defaultValue - The default value to be returned if the flag is not found.
     * @param evalCtx - The evaluation context to be used for targeting.
     * @param logger - The logger to be used to troubleshoot targeting errors. Overrides the default logger.
     * @returns - The resolved value and the reason for the resolution.
     */
    resolveStringEvaluation(flagKey: string, defaultValue: string, evalCtx?: EvaluationContext, logger?: Logger): ResolutionDetailsWithFlagMetadata<string>;
    /**
     * Resolve the flag evaluation to a numeric value.
     * @param flagKey - The key of the flag to evaluate.
     * @param defaultValue - The default value to return if the flag is not found or the evaluation fails.
     * @param evalCtx - The evaluation context to be used for targeting.
     * @param logger - The logger to be used to troubleshoot targeting errors. Overrides the default logger.
     * @returns - The resolved value and the reason for the resolution.
     */
    resolveNumberEvaluation(flagKey: string, defaultValue: number, evalCtx?: EvaluationContext, logger?: Logger): ResolutionDetailsWithFlagMetadata<number>;
    /**
     * Resolve the flag evaluation to an object value.
     * @template T - The type of the return value.
     * @param flagKey - The key of the flag to resolve.
     * @param defaultValue - The default value to use if the flag is not found.
     * @param evalCtx - The evaluation context to be used for targeting.
     * @param logger - The logger to be used to troubleshoot targeting errors. Overrides the default logger.
     * @returns - The resolved value and the reason for the resolution.
     */
    resolveObjectEvaluation<T extends JsonValue>(flagKey: string, defaultValue: T, evalCtx?: EvaluationContext, logger?: Logger): ResolutionDetailsWithFlagMetadata<T>;
    /**
     * Resolve the flag evaluation for all enabled flags.
     * @param evalCtx - The evaluation context to be used for targeting.
     * @param logger - The logger to be used to troubleshoot targeting errors. Overrides the default logger.
     * @returns - The list of evaluation details for all enabled flags.
     */
    resolveAll(evalCtx?: EvaluationContext, logger?: Logger): EvaluationDetails<JsonValue>[];
    /**
     * Resolves the value of a flag based on the specified type.
     * @template T - The type of the flag value.
     * @param {FlagValueType} type - The type of the flag value.
     * @param {string} flagKey - The key of the flag.
     * @param {T} defaultValue - The default value of the flag.
     * @param {EvaluationContext} evalCtx - The evaluation context for targeting rules.
     * @param {Logger} logger - The logger to be used to troubleshoot targeting errors. Overrides the default logger.
     * @returns {ResolutionDetailsWithFlagMetadata<T>} -  The resolved value and the reason for the resolution.
     */
    resolve<T extends FlagValue>(type: FlagValueType, flagKey: string, defaultValue: T, evalCtx?: EvaluationContext, logger?: Logger): ResolutionDetailsWithFlagMetadata<T>;
}
export {};
