import { EvaluationContext, JsonValue, Logger, OpenFeatureEventEmitter, Provider, ResolutionDetails } from '@openfeature/server-sdk';
import { FlagdProviderOptions } from './configuration';
import { Service } from './service/service';
export declare class FlagdProvider implements Provider {
    private readonly logger?;
    metadata: {
        name: string;
    };
    readonly runsOn = "server";
    readonly events: OpenFeatureEventEmitter;
    private readonly _service;
    /**
     * Construct a new flagd provider.
     *
     * @param options options, see {@link FlagdProviderOptions}
     * @param logger optional logger, see {@link Logger}
     * @param service optional internal service implementation, should not be needed for production
     */
    constructor(options?: FlagdProviderOptions, logger?: Logger | undefined, service?: Service);
    initialize(): Promise<void>;
    onClose(): Promise<void>;
    resolveBooleanEvaluation(flagKey: string, defaultValue: boolean, transformedContext: EvaluationContext, logger: Logger): Promise<ResolutionDetails<boolean>>;
    resolveStringEvaluation(flagKey: string, defaultValue: string, transformedContext: EvaluationContext, logger: Logger): Promise<ResolutionDetails<string>>;
    resolveNumberEvaluation(flagKey: string, defaultValue: number, transformedContext: EvaluationContext, logger: Logger): Promise<ResolutionDetails<number>>;
    resolveObjectEvaluation<T extends JsonValue>(flagKey: string, defaultValue: T, transformedContext: EvaluationContext, logger: Logger): Promise<ResolutionDetails<T>>;
    private handleReconnect;
    private handleError;
    private handleChanged;
}
