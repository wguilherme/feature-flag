import type { EvaluationContext, JsonValue, Logger, ResolutionDetails } from '@openfeature/server-sdk';
import { Config } from '../../configuration';
import { Service } from '../service';
import { DataFetch } from './data-fetch';
export declare class InProcessService implements Service {
    private readonly config;
    private _flagdCore;
    private _dataFetcher;
    constructor(config: Config, dataFetcher?: DataFetch, logger?: Logger);
    connect(reconnectCallback: () => void, changedCallback: (flagsChanged: string[]) => void, disconnectCallback: (message: string) => void): Promise<void>;
    disconnect(): Promise<void>;
    resolveBoolean(flagKey: string, defaultValue: boolean, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<boolean>>;
    resolveNumber(flagKey: string, defaultValue: number, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<number>>;
    resolveString(flagKey: string, defaultValue: string, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<string>>;
    resolveObject<T extends JsonValue>(flagKey: string, defaultValue: T, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<T>>;
    private evaluate;
    /**
     * Sets the flag configuration
     * @param flags The flags to set as stringified JSON
     * @returns {string[]} The flags that have changed
     * @throws â€” {Error} If the configuration string is invalid.
     */
    private setFlagConfiguration;
}
