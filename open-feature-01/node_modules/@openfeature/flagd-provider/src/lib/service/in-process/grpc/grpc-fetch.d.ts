import { Logger } from '@openfeature/server-sdk';
import { FlagSyncServiceClient } from '../../../../proto/ts/flagd/sync/v1/sync';
import { Config } from '../../../configuration';
import { DataFetch } from '../data-fetch';
/**
 * Implements the gRPC sync contract to fetch flag data.
 */
export declare class GrpcFetch implements DataFetch {
    private readonly _syncClient;
    private readonly _request;
    private _syncStream;
    private _logger;
    /**
     * Initialized will be set to true once the initial connection is successful
     * and the first payload has been received. Subsequent reconnects will not
     * change the initialized value.
     */
    private _initialized;
    /**
     * Is connected represents the current known connection state. It will be
     * set to true once the first payload has been received.but will be set to
     * false if the connection is lost.
     */
    private _isConnected;
    constructor(config: Config, syncServiceClient?: FlagSyncServiceClient, logger?: Logger);
    connect(dataCallback: (flags: string) => string[], reconnectCallback: () => void, changedCallback: (flagsChanged: string[]) => void, disconnectCallback: (message: string) => void): Promise<void>;
    disconnect(): Promise<void>;
    private listen;
    private handleError;
    private reconnect;
}
