import { EvaluationContext, JsonValue, Logger, ResolutionDetails } from '@openfeature/server-sdk';
import { ServiceClient } from '../../../proto/ts/flagd/evaluation/v1/evaluation';
import { Config } from '../../configuration';
import { Service } from '../service';
interface FlagChange {
    type: 'delete' | 'write' | 'update';
    source: string;
    flagKey: string;
}
export interface FlagChangeMessage {
    flags?: {
        [key: string]: FlagChange;
    };
}
export declare const Codes: {
    readonly InvalidArgument: "INVALID_ARGUMENT";
    readonly NotFound: "NOT_FOUND";
    readonly DataLoss: "DATA_LOSS";
    readonly Unavailable: "UNAVAILABLE";
};
export declare class GRPCService implements Service {
    private logger?;
    private _client;
    private _cache;
    private _cacheEnabled;
    private _eventStream;
    private get _cacheActive();
    constructor(config: Config, client?: ServiceClient, logger?: Logger | undefined);
    connect(reconnectCallback: () => void, changedCallback: (flagsChanged: string[]) => void, disconnectCallback: (message: string) => void): Promise<void>;
    disconnect(): Promise<void>;
    resolveBoolean(flagKey: string, _: boolean, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<boolean>>;
    resolveString(flagKey: string, _: string, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<string>>;
    resolveNumber(flagKey: string, _: number, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<number>>;
    resolveObject<T extends JsonValue>(flagKey: string, _: T, context: EvaluationContext, logger: Logger): Promise<ResolutionDetails<T>>;
    private listen;
    private handleFlagsChanged;
    private reconnect;
    private handleError;
    private resolve;
    private onRejected;
}
export {};
