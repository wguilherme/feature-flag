export type CacheOption = 'lru' | 'disabled';
export type ResolverType = 'rpc' | 'in-process';
export interface Config {
    /**
     * The domain name or IP address of flagd.
     *
     * @default localhost
     */
    host: string;
    /**
     * The port flagd is listen on.
     *
     * @default 8013
     */
    port: number;
    /**
     * Determines if TLS should be used.
     *
     * @default false
     */
    tls: boolean;
    /**
     * When set, a unix socket connection is used.
     *
     * @example "/tmp/flagd.socks"
     */
    socketPath?: string;
    /**
     * Resolver type to use by the provider.
     *
     * Options include rpc & in-process.
     *
     * rpc - flag resolving happens remotely over gRPC
     * in-process - flag resolving happens in-process, fetching flag definitions using the {@link https://github.com/open-feature/flagd-schemas/blob/main/protobuf/sync/v1/sync_service.proto|sync.proto}
     *
     * @default 'rpc'
     */
    resolverType?: ResolverType;
    /**
     * File source of flags to be used by offline mode.
     * Setting this enables the offline mode of the in-process provider.
     */
    offlineFlagSourcePath?: string;
    /**
     * Selector to be used with flag sync gRPC contract.
     */
    selector?: string;
    /**
     * Cache implementation to use (or disabled).
     *
     * @default 'lru'
     */
    cache?: CacheOption;
    /**
     * Max cache size (items).
     *
     * @default 1000
     */
    maxCacheSize?: number;
}
export type FlagdProviderOptions = Partial<Config>;
export declare function getConfig(options?: FlagdProviderOptions): {
    host: string;
    port: number;
    tls: boolean;
    socketPath?: string;
    resolverType?: ResolverType;
    offlineFlagSourcePath?: string;
    selector?: string;
    cache?: CacheOption;
    maxCacheSize?: number;
};
