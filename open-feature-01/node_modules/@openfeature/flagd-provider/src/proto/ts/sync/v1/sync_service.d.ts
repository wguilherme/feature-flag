import { CallOptions, ChannelCredentials, Client, ClientOptions, ClientReadableStream, ClientUnaryCall, handleServerStreamingCall, handleUnaryCall, Metadata, ServiceError, UntypedServiceImplementation } from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "sync.v1";
/**
 * DEPRECATED; use flagd.sync.v1
 * Flag definition sync API
 *
 * This proto defines a simple API to synchronize a feature flag definition.
 * It supports establishing a stream for getting notifications about changes in a flag definition.
 *
 * @deprecated
 */
/**
 * SyncState conveys the state of the payload. These states are related to flagd isync.go type definitions but
 * contains extras to optimize grpc use case. Refer - https://github.com/open-feature/flagd/blob/main/pkg/sync/isync.go
 */
export declare enum SyncState {
    /** SYNC_STATE_UNSPECIFIED - Value is ignored by the listening flagd */
    SYNC_STATE_UNSPECIFIED = 0,
    /**
     * SYNC_STATE_ALL - All the flags matching the request. This is the default response and other states can be ignored
     * by the implementation. Flagd internally replaces all existing flags for this response state.
     */
    SYNC_STATE_ALL = 1,
    /** SYNC_STATE_ADD - Convey an addition of a flag. Flagd internally handles this by combining new flags with existing ones */
    SYNC_STATE_ADD = 2,
    /**
     * SYNC_STATE_UPDATE - Convey an update of a flag. Flagd internally attempts to update if the updated flag already exist OR if it does not,
     * it will get added
     */
    SYNC_STATE_UPDATE = 3,
    /** SYNC_STATE_DELETE - Convey a deletion of a flag. Flagd internally removes the flag */
    SYNC_STATE_DELETE = 4,
    /** SYNC_STATE_PING - Optional server ping to check client connectivity. Handling is ignored by flagd and is to merely support live check */
    SYNC_STATE_PING = 5,
    UNRECOGNIZED = -1
}
export declare function syncStateFromJSON(object: any): SyncState;
export declare function syncStateToJSON(object: SyncState): string;
/** SyncFlagsRequest is the request initiating the sever-streaming rpc. Flagd sends this request, acting as the client */
export interface SyncFlagsRequest {
    /**
     * Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
     * utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
     * flag configurations that it can expose to this request. This field is intended to be optional. However server
     * implementations may enforce it.
     *    ex:- provider_id: flagd-weatherapp-sidecar
     */
    providerId: string;
    /**
     * Optional: A selector for the flag configuration request. The server implementation may utilize this to select
     * flag configurations from a collection, select the source of the flag or combine this to any desired underlying
     * filtering mechanism.
     *    ex:- selector: 'source=database,app=weatherapp'
     */
    selector: string;
}
/** SyncFlagsResponse is the server response containing feature flag configurations and the state */
export interface SyncFlagsResponse {
    /** flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json */
    flagConfiguration: string;
    /**
     * State conveying the operation to be performed by flagd. See the descriptions of SyncState for an explanation of
     * supported values
     */
    state: SyncState;
}
/** FetchAllFlagsRequest is the request to fetch all flags. Flagd sends this request as the client in order to resync its internal state */
export interface FetchAllFlagsRequest {
    /**
     * Optional: A unique identifier for flagd(grpc client) initiating the request. The server implementations may
     * utilize this identifier to uniquely identify, validate(ex:- enforce authentication/authorization) and filter
     * flag configurations that it can expose to this request. This field is intended to be optional. However server
     * implementations may enforce it.
     *    ex:- provider_id: flagd-weatherapp-sidecar
     */
    providerId: string;
    /**
     * Optional: A selector for the flag configuration request. The server implementation may utilize this to select
     * flag configurations from a collection, select the source of the flag or combine this to any desired underlying
     * filtering mechanism.
     *    ex:- selector: 'source=database,app=weatherapp'
     */
    selector: string;
}
/** FetchAllFlagsResponse is the server response containing feature flag configurations */
export interface FetchAllFlagsResponse {
    /** flagd feature flag configuration. Must be validated to schema - https://raw.githubusercontent.com/open-feature/schemas/main/json/flagd-definitions.json */
    flagConfiguration: string;
}
export declare const SyncFlagsRequest: {
    encode(message: SyncFlagsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SyncFlagsRequest;
    fromJSON(object: any): SyncFlagsRequest;
    toJSON(message: SyncFlagsRequest): unknown;
    create<I extends Exact<DeepPartial<SyncFlagsRequest>, I>>(base?: I): SyncFlagsRequest;
    fromPartial<I extends Exact<DeepPartial<SyncFlagsRequest>, I>>(object: I): SyncFlagsRequest;
};
export declare const SyncFlagsResponse: {
    encode(message: SyncFlagsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SyncFlagsResponse;
    fromJSON(object: any): SyncFlagsResponse;
    toJSON(message: SyncFlagsResponse): unknown;
    create<I extends Exact<DeepPartial<SyncFlagsResponse>, I>>(base?: I): SyncFlagsResponse;
    fromPartial<I extends Exact<DeepPartial<SyncFlagsResponse>, I>>(object: I): SyncFlagsResponse;
};
export declare const FetchAllFlagsRequest: {
    encode(message: FetchAllFlagsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchAllFlagsRequest;
    fromJSON(object: any): FetchAllFlagsRequest;
    toJSON(message: FetchAllFlagsRequest): unknown;
    create<I extends Exact<DeepPartial<FetchAllFlagsRequest>, I>>(base?: I): FetchAllFlagsRequest;
    fromPartial<I extends Exact<DeepPartial<FetchAllFlagsRequest>, I>>(object: I): FetchAllFlagsRequest;
};
export declare const FetchAllFlagsResponse: {
    encode(message: FetchAllFlagsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchAllFlagsResponse;
    fromJSON(object: any): FetchAllFlagsResponse;
    toJSON(message: FetchAllFlagsResponse): unknown;
    create<I extends Exact<DeepPartial<FetchAllFlagsResponse>, I>>(base?: I): FetchAllFlagsResponse;
    fromPartial<I extends Exact<DeepPartial<FetchAllFlagsResponse>, I>>(object: I): FetchAllFlagsResponse;
};
/** FlagService implements a server streaming to provide realtime flag configurations */
export type FlagSyncServiceService = typeof FlagSyncServiceService;
export declare const FlagSyncServiceService: {
    readonly syncFlags: {
        readonly path: "/sync.v1.FlagSyncService/SyncFlags";
        readonly requestStream: false;
        readonly responseStream: true;
        readonly requestSerialize: (value: SyncFlagsRequest) => Buffer<ArrayBuffer>;
        readonly requestDeserialize: (value: Buffer) => SyncFlagsRequest;
        readonly responseSerialize: (value: SyncFlagsResponse) => Buffer<ArrayBuffer>;
        readonly responseDeserialize: (value: Buffer) => SyncFlagsResponse;
    };
    readonly fetchAllFlags: {
        readonly path: "/sync.v1.FlagSyncService/FetchAllFlags";
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestSerialize: (value: FetchAllFlagsRequest) => Buffer<ArrayBuffer>;
        readonly requestDeserialize: (value: Buffer) => FetchAllFlagsRequest;
        readonly responseSerialize: (value: FetchAllFlagsResponse) => Buffer<ArrayBuffer>;
        readonly responseDeserialize: (value: Buffer) => FetchAllFlagsResponse;
    };
};
export interface FlagSyncServiceServer extends UntypedServiceImplementation {
    syncFlags: handleServerStreamingCall<SyncFlagsRequest, SyncFlagsResponse>;
    fetchAllFlags: handleUnaryCall<FetchAllFlagsRequest, FetchAllFlagsResponse>;
}
export interface FlagSyncServiceClient extends Client {
    syncFlags(request: SyncFlagsRequest, options?: Partial<CallOptions>): ClientReadableStream<SyncFlagsResponse>;
    syncFlags(request: SyncFlagsRequest, metadata?: Metadata, options?: Partial<CallOptions>): ClientReadableStream<SyncFlagsResponse>;
    fetchAllFlags(request: FetchAllFlagsRequest, callback: (error: ServiceError | null, response: FetchAllFlagsResponse) => void): ClientUnaryCall;
    fetchAllFlags(request: FetchAllFlagsRequest, metadata: Metadata, callback: (error: ServiceError | null, response: FetchAllFlagsResponse) => void): ClientUnaryCall;
    fetchAllFlags(request: FetchAllFlagsRequest, metadata: Metadata, options: Partial<CallOptions>, callback: (error: ServiceError | null, response: FetchAllFlagsResponse) => void): ClientUnaryCall;
}
export declare const FlagSyncServiceClient: {
    new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FlagSyncServiceClient;
    service: typeof FlagSyncServiceService;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
